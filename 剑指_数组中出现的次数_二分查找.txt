class Solution {
public:
    int GetNumberOfK(vector<int> data ,int k) {
        if(data.empty()) return 0;
        int first = get_first(data ,k);
        cout<<first<<endl;
        int last =  get_last(data ,k);
         cout<<last<<endl;
        if (first!=-1 && last!=-1) return last-first+1; 
        else return 0;
        
    }
        
        
private:
        
     int get_first(vector<int> data ,int k){
         int left = 0, right = data.size()-1 ;
         int mid = 0;
         
         while(left<=right){   // 必须有等号
             int mid = (left+right)/2;
             if(data[mid]<k) left=mid+1;
             else if (data[mid]>k) right=mid-1;
             else {
                 if(mid -1 >=0 && data[mid-1]==k) right=mid-1;         
                 else        return mid;
                 
             }                          
         }       

         return -1;   
        }
    
    
     int get_last(vector<int> data ,int k){
          int left = 0, right = data.size()-1 ;
          int mid = 0;
         
          while(left<=right){/ 必须有等号
             int mid = (left+right)/2;
             if(data[mid]<k) left=mid+1;
             else if (data[mid]>k) right=mid-1;
             else {
                 if(mid+1< data.size() && data[mid+1]==k) left=mid+1;    
                 else     return mid;  
                 
             }              
             
         }
         
         return -1;
         
         
    
         
         
         
         
     }
        
    
};