1.hash 
//O(n),  O(n)
#include <map>
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_map<int,int> dict;
        for(int num :nums){
            dict[num]+=1;
            if(dict[num] > 1)  return true;
            
            
            
        }
        return false;
        
    }
};

2.排序


//O(nlogn)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i = 0 ;i < nums.size()-2;i++){
            if(nums[i]==nums[i+1] )  return true;
               
            
            
            
        }
        return false;
        
    }
};

2.排序
//O(nlogn)
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i = 0 ;i < nums.size()-2;i++){
            if(nums[i]==nums[i+1] )  return true;
               
            
            
            
        }
        return false;
        
    }
};